import numpy as np

def unit_step(v):
    if v > 0:
        return 1
    else:
        return 0


def perceptron(x, w, b):
    v = np.dot(w,x) + b
    y = unit_step(v)
    return y

def AND_percep(x):
    w = np.array([1, 1])
    b = -1.5
    return perceptron(x, w, b)

example1 = np.array([1, 1])
example2 = np.array([1, 0])
example3 = np.array([0, 1])
example4 = np.array([0, 0])

print("AND({},{}) = {}".format(1, 1, AND_percep(example1)))
print("AND({},{}) = {}".format(1, 0, AND_percep(example2)))
print("AND({},{}) = {}".format(0, 1, AND_percep(example3)))
print("AND({},{}) = {}".format(0, 0, AND_percep(example4)))

def OR_percep(x):
    w = np.array([1, 1])
    b = -0.5
    return perceptron(x, w, b)

example1 = np.array([1, 1])
example2 = np.array([1, 0])
example3 = np.array([0, 1])
example4 = np.array([0, 0])

print("OR({},{}) = {}".format(1, 1, OR_percep(example1)))
print("OR({},{}) = {}".format(1, 0, OR_percep(example2)))
print("OR({},{}) = {}".format(0, 1, OR_percep(example3)))
print("OR({},{}) = {}".format(0, 0, OR_percep(example4)))

def NOT_logicFunction(x):
    wNOT = -1
    bNOT = 0.5
    return perceptron(x, wNOT, bNOT)

# XOR Logic Function
# with AND, OR and NOT
def XOR_percep(x):
    y1 = AND_percep(x)
    y2 = OR_percep(x)
    y3 = NOT_logicFunction(y1)
    final_x = np.array([y2, y3])
    finalOutput = AND_percep(final_x)
    return finalOutput


example1 = np.array([1, 1])
example2 = np.array([1, 0])
example3 = np.array([0, 1])
example4 = np.array([0, 0])

print("XOR({},{}) = {}".format(1, 1, XOR_percep(example1)))
print("XOR({},{}) = {}".format(1, 0, XOR_percep(example2)))
print("XOR({},{}) = {}".format(0, 1, XOR_percep(example3)))
print("XOR({},{}) = {}".format(0, 0, XOR_percep(example4)))
