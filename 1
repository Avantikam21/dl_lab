import tensorflow as tf

Addition operation

a1= tf.constant([[1,2,3],[4,7,13]])
b1= tf.constant([[2,4,7],[5,8,90]])
c1= tf.add(a1,b1)
print(c1)

Substraction operation

p1= tf.constant([[1,2,3],[4,7,13]])
q1= tf.constant([[2,4,7],[5,8,90]])
r1= tf.subtract(p1,q1)
print(r1)

Multiply

x1= tf.constant([[1,2,3],[4,7,13]])
y1= tf.constant([[2,4,7],[5,8,90]])
z1= tf.multiply(x1,y1)
print(z1)

Matrix Multipilication

s1= tf.constant([[1,2,3],[4,7,13]])
t1= tf.constant([[4,7,9],[2,4,7],[5,8,90]])
u1= tf.matmul(s1,t1)
print(u1)

row wise or column wise addition

l1= tf.constant([[1,2,3],[4,7,13]])
i1=tf.reduce_sum(l1) #complete matrix
i2=tf.reduce_sum(l1,0) #column 1
i3=tf.reduce_sum(l1,1) #column 2
print(i1)
print(i2)
print(i3)

 Deï¿½ning Functions
 def v_v(wv,xv):
 func=tf.matmul(w,x)
 print(func)
 def matmul1(w,x):
 total=tf.matmul(w,x)
 return total
 w=([[1,2,3],[4,5,6],[7,8,9]])
 x=([[1,2,3],[4,5,6],[7,8,9]])
 print(v_v(w,x))

 import cProfile
 import time
 w=tf.constant([[1,2],[7,8]])
 x=tf.constant([[1,2],[7,10]])
 with cProfile.Profile() as pr:
 t= matmul1(w,x)
 pr.print_stats()
 print(t)

 w=tf.constant([[1,2],[7,8]])
 x=tf.constant([[1,2],[7,10]])
 with cProfile.Profile() as pr:
 t= matmul1(w,x)
 pr.print_stats()
 print(t)
